{
  "hash": "bb456b1f5f5db9302c0bdd5773fe68e7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Central Limit Theorem Demo with Polygenic Risk Scores\"\nformat: \n  html:\n    toc: true\n    page-layout: full\n    code-fold: true\n    code-summary: \"Show the code\"\nbibliography: biblio_PRS.bib\ncsl: nature.csl\n---\n\n\n\n\n## Central Limit Theorem\n\nThe classical Central Limit Theorem (CLT) states that for a series of independent and identically distributed random variables $X_1, X_2, ...$ with $\\mathbb{E}[X_i] = \\mu$ and $var(X_i) = \\sigma^2 < \\infty$, a finite sum of those variables $S_n = X_1 + X_2 + ... + X_n$ will be normally distributed and centered at $n \\mu$.\nFormally, we can write the CLT as follows: $$\n\\frac{S_n - n \\mu}{\\sigma \\sqrt{n}} \\to^D \\mathcal{N}(0,1)\n$$ where $\\to^D$ indicates convergence in distribution.\n\nThere exist several other versions of the CLT that relax the assumptions of independence and/or identical distribution of the random variables.\nIn this demonstration, we consider random variables that are independent but not identically distributed, effectively demonstrating Lyapunov's CLT, which does not require the random variables to be identically distributed.\n\n## Lyapunov's Central Limit Theorem\n\nLyapunov's CLT relaxes the assumption that the random variables are identically distributed.\nIt states that for a sequence of independent random variables $X_1, X_2, ...$, if the $(2+\\epsilon)^{th}$ moment (for $\\epsilon > 0$) exists, and $\\mathbb{E}[X_i] = \\mu_i < \\infty$ and $var(X_i) = \\sigma_i^2 < \\infty$, we define\n\n$$\nr_n^{2+\\epsilon} = \\sum_{i=1}^{n} \\langle \\lvert x_i - \\mu_i \\rvert ^{2+\\epsilon} \\rangle\n$$ $$\ns_n^2 = \\sum_{i=1}^n \\sigma_i^2\n$$ then if\n\n$$\n\\lim_{n \\to \\infty} \\frac{r_n}{s_n} = 0\n$$ then the CLT holds.\n\n## Polygenic Risk Scores\n\nTo predict someone's risk of cancer, statisticians can use a polygenic risk score (PRS) to identify individuals with a high genetic risk of cancer who may benefit from early or extra monitoring.\nA PRS is a weighted sum of harmful (or protective) genetic variants that may increase (or decrease) someone's risk of disease.\nFormally, we define a PRS as follows:\\\n$$\nPRS = \\sum_{i=1}^{n} \\beta_i G_i\n$$ where $\\beta_i$ is the effect weight (i.e. effect size) and $G_i \\in\\{0,1,2\\}$ is the genotype for $i = 1,...,n$ genetic variants.\n\nBy construction, $G_i$ are independent (i.e. we only include independent alleles, which we know by calculating their linkage disequilibrium scores), and they have finite mean and variance:\n\n\n```{=tex}\n\\begin{align*}\n\\mathbb{E}[PRS] &= \\mathbb{E}[\\sum_{i=1}^{n}\\beta_i G_i] \\\\\n&= \\sum_{i=1}^{n}\\mathbb{E}[\\beta_i G_i] \\because \\text{independent} \\\\\n&= \\sum_{i=1}^{n}\\beta_i \\mathbb{E}[G_i] \\\\\n&= \\sum_{i=1}^{n} \\beta_i 2p_i < \\infty\n\\end{align*}\n```\n\n```{=tex}\n\\begin{align*}\nvar(PRS) &= var(\\sum_{i=1}^{n} \\beta_i G_i) \\\\\n&= \\sum_{i=1}^{n} var(\\beta_i G_i) \\because \\text{independent} \\\\\n&= \\sum_{i=1}^{n} \\beta_i^2 var(G_i) \\\\\n&= \\sum_{i=1}^{n} \\beta_i^2 2 p_i (1-p_i) < \\infty\n\\end{align*}\n```\n\nHowever, the genotypes are not identically distributed: $$\nG_i \\sim Bin(2,p_i)\n$$ where $p_i \\in[0,1]$ is the frequency of the $i^{th}$ effect allele.\n\nNotice that the PRS meets the assumptions of independence and finite mean and variance, but the random variables are not identically distributed.\nSince the $(2+\\epsilon)^{th}$ moment is difficult to obtain, we will explore the behavior of the PRS through simulation.\nWe consider a series of PRS for various common cancers that have a different number of risk alleles included in the PRS ($n$).\nTypically, we calculate PRS on real people's genotype data, but for the sake of privacy, we will simulate data based on the allele frequencies provided for each PRS.\n\n## Simulated PRS: Simple to complex\n\nPRS are publicly available via the [PGS Catalog](https://www.pgscatalog.org/).\nThe typical PGS 'scorefile' (shown below for thyroid cancer) includes enough information to identify a specific variant (e.g. rsID or chromosome number and position), an indication of which allele is the effect allele and which is not (i.e. the 'other' allele) for purposes of cross-checking in the event of genotyping complexity (e.g. strand-flipping or multi-allelic variants), and the effect size estimate ($\\hat{\\beta_i}$).\nSome scorefiles also contain information about how common the effect allele is, which is useful for inferring ambiguous SNPs, and required for simulating genotypes.\n\nAs we showed above, $G_i \\sim Bin(2,p_i)$ where $p_i \\in[0,1]$ is the frequency of the effect allele, so we can use the empirical effect allele frequency to simulate $G_i$ for a large number of individuals (N = 10,000).\nThen we will calculate the PRS using the formula above and check out the distribution to see if it is roughly normal.\nLet's begin with a relatively simple PRS.\n\n### Thyroid cancer\n\nThyroid cancer ranks as \\~13th most common cancer in the U.S., with \\~44,000 new cases predicted for 2024.\n@SEER Graff et al. (2021) @Graff:2021aa developed a relatively simple PRS for thyroid cancer [(PGS000087)](https://www.pgscatalog.org/score/PGS000087/) that only includes 12 variants:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define function to make nice table\nmake_table <- function(PGS_ID) {\n  # Read in scorefile for the PRS\n  scorefile <- read_csv(here(\"data\",paste0(PGS_ID,\"_scorefile.csv\")))\n  \n  # Reformat to make pretty table \n  scorefile_pretty <- scorefile %>%\n    mutate(effect_weight = round(effect_weight, 4)) %>%\n    rename(Chr = chr_name,\n           Position = chr_position,\n           'Effect allele' = effect_allele,\n           'Other allele' = other_allele,\n           'Effect weight' = effect_weight,\n           'Effect allele freq.' = allelefrequency_effect)\n  \n  return(datatable(scorefile_pretty, options = list(pageLength = 25)))\n} \n\n# Make table for thyroid PRS\nPRS_id_thyroid <- \"PGS000087\"\nmake_table(PRS_id_thyroid)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-03165f7b5b71640be775\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-03165f7b5b71640be775\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],[\"rs12129938\",\"rs11693806\",\"rs6793295\",\"rs73227498\",\"rs2466076\",\"rs13284787\",\"rs1588635\",\"rs7902587\",\"rs944289\",\"rs116909374\",\"rs56062135\",\"rs2289261\"],[1,2,3,5,8,9,9,10,14,14,15,15],[233412561,218292158,169518455,111485904,32432796,4811553,100537802,105694301,36649246,36738361,67455630,67457485],[\"A\",\"C\",\"T\",\"A\",\"G\",\"A\",\"A\",\"T\",\"T\",\"T\",\"T\",\"C\"],[\"G\",\"G\",\"C\",\"T\",\"T\",\"G\",\"C\",\"C\",\"C\",\"C\",\"C\",\"G\"],[0.2776,0.3577,0.207,0.3148,0.2776,0.6981000000000001,0.5247000000000001,0.3436,0.3001,0.5933,0.2151,0.207],[0.795,0.319,0.759,0.872,0.484,0.8100000000000001,0.396,0.109,0.603,0.034,0.253,0.6830000000000001]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>rsID<\\/th>\\n      <th>Chr<\\/th>\\n      <th>Position<\\/th>\\n      <th>Effect allele<\\/th>\\n      <th>Other allele<\\/th>\\n      <th>Effect weight<\\/th>\\n      <th>Effect allele freq.<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":25,\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[2,3,6,7]},{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"rsID\",\"targets\":1},{\"name\":\"Chr\",\"targets\":2},{\"name\":\"Position\",\"targets\":3},{\"name\":\"Effect allele\",\"targets\":4},{\"name\":\"Other allele\",\"targets\":5},{\"name\":\"Effect weight\",\"targets\":6},{\"name\":\"Effect allele freq.\",\"targets\":7}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define function to simulate PRS\nsim_PRS <- function(PGS_ID, N_sim, subset = NA) {\n  # Load scorefile for PRS\nscorefile <- read_csv(here(\"data\",paste0(PGS_ID,\"_scorefile.csv\")))\n\n# If we want to subset the PRS variants randomly, do it here\nif (is.na(subset) == FALSE) {\n inds <- sample(1:dim(scorefile)[1],subset)\n  scorefile <- scorefile[inds,]\n}\n\n# Simulate genotypes for each SNP\ndata <- mapply(rbinom, prob = scorefile$allelefrequency_effect, MoreArgs = list(n = N_sim, size = 2))\n\n# Check that data were simulated correctly:\n# colMeans(data)/2 - scorefile$allelefrequency_effect\n\n# Calculate PRS\nPRS <- colSums(t(data)*scorefile$effect_weight)\n\nreturn(PRS)\n}  # end sim_PRS function\n\n# calculate expected mean and variance of PRS (assuming beta_hat = beta)\ncalc_exp_mean_var <- function(PGS_ID) {\n  # Load scorefile for PRS\nscorefile <- read_csv(here(\"data\",paste0(PGS_ID,\"_scorefile.csv\")))\n\np <- scorefile$allelefrequency_effect\nbeta <- scorefile$effect_weight\n\nmu <- sum(2*beta*p)\nsigmasq <- sum(2*(beta)^2*p*(1-p))\nreturn(list(mu = mu, sigmasq = sigmasq))\n}\n\n# function to make pretty PRS plot\nplot_PRS <- function(PRS_scores, mu = NA) {\n  PRS_df <- data.frame(PRS = PRS_scores)\n  plot <- PRS_df %>%\n    ggplot(aes(x = PRS)) +\n   # geom_histogram() +\n    geom_density() +\n    theme_minimal()\n  \n  return(plot)\n}\n\n# Simulate PRS for thyroid\n# Number of individuals to simulate genotypes for\nN_sim <- 10000\n\n# nvar = 12\nPRS_thyroid <- sim_PRS(PRS_id_thyroid, N_sim)\n\n# Calc expected mean and var\nPRS_thyroid_exp = calc_exp_mean_var(PRS_id_thyroid)\n\n# Plot distribution of betas\nscorefile_thyroid <- read_csv(here(\"data\",paste0(PRS_id_thyroid,\"_scorefile.csv\")))\n\nhist(scorefile_thyroid$effect_weight, xlab = \"Effect weight\", main = \"Histogram of thyroid cancer PRS effect weights\")\n```\n\n::: {.cell-output-display}\n![](PRS_CLT_demo_files/figure-html/define sim function-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Calculate summary statistics\nPRS_thyroid_mn <- mean(PRS_thyroid)\nPRS_thyroid_var <- var(PRS_thyroid)\n\n\n# Plot PRS \nh <- hist(PRS_thyroid, breaks=30, xlab = \"PRS\", main = \"Simulated PRS for thyroid cancer\")\nxfit <- seq(min(PRS_thyroid), max(PRS_thyroid),length=40)\nyfit <- N_sim/5*dnorm(xfit, mean = mean(PRS_thyroid), sd = sd(PRS_thyroid)) \nlines(xfit,yfit)\n```\n\n::: {.cell-output-display}\n![](PRS_CLT_demo_files/figure-html/define sim function-2.png){width=672}\n:::\n:::\n\n\n\n\n### Lung cancer\n\nLung cancer is the number one cause of cancer deaths.\nThis lung cancer PRS [(PGS000740)](https://www.pgscatalog.org/score/PGS000740/), developed by Hung et al. (2021), @Hung:2021aa has 128 genetic variants.\nThis histogram looks even more symmetric and is becoming more normal.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# nvar = 128\nPRS_id_lung <- \"PGS000740\"\nPRS_lung <- sim_PRS(PRS_id_lung, N_sim)\n\n# Plot distribution of betas\nscorefile_lung <- read_csv(here(\"data\",paste0(PRS_id_lung,\"_scorefile.csv\")))\nhist(scorefile_lung$effect_weight, xlab = \"Effect weight\", main = \"Histogram of lung cancer PRS effect weights\")\n```\n\n::: {.cell-output-display}\n![](PRS_CLT_demo_files/figure-html/lung-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Calc expected mean and var\nPRS_lung_exp = calc_exp_mean_var(PRS_id_lung)\n\n# Calculate summary statistics\nPRS_lung_mn <- mean(PRS_lung)\nPRS_lung_var <- var(PRS_lung)\n\n# Plot PRS \nh <- hist(PRS_lung, breaks=30, xlab = \"PRS\", main = \"Simulated PRS for lung cancer\")\nxfit <- seq(min(PRS_lung), max(PRS_lung),length=40)\nyfit <- N_sim/10*dnorm(xfit, mean = mean(PRS_lung), sd = sd(PRS_lung)) \nlines(xfit,yfit)\n```\n\n::: {.cell-output-display}\n![](PRS_CLT_demo_files/figure-html/lung-2.png){width=672}\n:::\n:::\n\n\n### Breast cancer\n\nFinally, let's look at the breast cancer PRS developed by Mavaddat et al. (2019).\n@Mavaddat:2019aa This PRS [(PGS000004)](https://www.pgscatalog.org/score/PGS000004/) contains 313 variants.\nThe distribution of this PRS looks very normal!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# nvar = 313\nPRS_id_breast <- \"PGS000004\"\nPRS_breast <- sim_PRS(PRS_id_breast, N_sim)\n\n# Plot distribution of betas\nscorefile_breast <- read_csv(here(\"data\",paste0(PRS_id_breast,\"_scorefile.csv\")))\nhist(scorefile_breast$effect_weight, xlab = \"Effect weight\", main = \"Histogram of breast cancer PRS effect weights\")\n```\n\n::: {.cell-output-display}\n![](PRS_CLT_demo_files/figure-html/breast-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Calc expected mean and var\nPRS_breast_exp = calc_exp_mean_var(PRS_id_breast)\n\n# Calculate summary statistics\nPRS_breast_mn <- mean(PRS_breast)\nPRS_breast_var <- var(PRS_breast)\n\n# Plot PRS \nh <- hist(PRS_breast, breaks=30, xlab = \"PRS\", main = \"Simulated PRS for breast cancer\")\nxfit <- seq(min(PRS_breast), max(PRS_breast),length=40)\nyfit <- N_sim/5*dnorm(xfit, mean = mean(PRS_breast), sd = sd(PRS_breast)) \nlines(xfit,yfit)\n```\n\n::: {.cell-output-display}\n![](PRS_CLT_demo_files/figure-html/breast-2.png){width=672}\n:::\n:::\n\n\nIf you're like me and skeptical that all of these PRS were too beautiful (i.e. normal) especially when the number of genetic variants was small (!!), then I'll demonstrate the CLT by subsampling a random set of variants from the 313 breast cancer PRS.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Repeat with different number of variants\nsubsets <- c(5, 15, 30, 75, 150, 313)\nsubset_labels <- as_labeller(c('5' = \"n = 5\", '15' = \"n = 15\", '30' = \"n = 30\", '75' = \"n = 75\", '150' = \"n = 100\", '313' = \"n = 313\"))\n\nPRS_breast_subset <- mapply(sim_PRS, subset = subsets, MoreArgs = list(PGS_ID = PRS_id_breast, N_sim = N_sim))\nPRS_breast_subset_df <- data.frame(PRS = as.vector(PRS_breast_subset))\nPRS_breast_subset_df$n_var <- rep(subsets,each = N_sim)\n\n# Plot\nPRS_breast_subset_df %>%\n  ggplot() +\n  geom_histogram(aes(x = PRS)) +\n  facet_wrap(vars(n_var), labeller = subset_labels) + \n  theme_minimal() +\n  labs(title = \"PRS for a subset of variants from the 313 breast cancer model\",\n       subtitle = \"The distributions become normal and centered at the expected mean as n increases\")\n```\n\n::: {.cell-output-display}\n![](PRS_CLT_demo_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n## Summary and importance\n\nNotice that the shape of the PRS curves became more normal as the number of variants increased.\nAdditionally, is \\~ normal with mean and sd similar to what we would expect under the CLT!\nThis is because of the additive nature of the PRS.\nIn research, we rely on this predictable behavior of the PRS to simulate PRS for reference populations when those individuals do not have genotpye data available.\n",
    "supporting": [
      "PRS_CLT_demo_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"../site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/datatables-binding-0.33/datatables.js\"></script>\n<script src=\"../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"../site_libs/dt-core-1.13.6/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\n<link href=\"../site_libs/dt-core-1.13.6/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/dt-core-1.13.6/js/jquery.dataTables.min.js\"></script>\n<link href=\"../site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}